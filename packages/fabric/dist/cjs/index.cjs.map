{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/gateway.ts"],
  "sourcesContent": ["export * from './gateway';", "import * as grpc from '@grpc/grpc-js';\nimport { connect, Contract, Gateway, Identity, Signer, signers } from '@hyperledger/fabric-gateway';\nimport * as crypto from 'crypto';\nimport { promises as fs } from 'fs';\nimport * as path from 'path';\n\n// TODO change this so its dynamic\nconst channelName = envOrDefault('CHANNEL_NAME', 'mychannel');\nconst chaincodeName = envOrDefault('CHAINCODE_NAME', 'ehrcc');\nconst mspId = envOrDefault('MSP_ID', 'Org1MSP');\n\n// Path to security materials.\nconst cryptoPath = envOrDefault('CRYPTO_PATH', path.resolve(__dirname, '..', '..', '..', 'organizations', 'peerOrganizations', 'org1.example.com'));\n\n// Path to provider private key directory.\nconst keyDirectoryPath = envOrDefault('KEY_DIRECTORY_PATH', path.resolve(cryptoPath, 'users', 'User1@org1.example.com', 'msp', 'keystore'));\n\n// Path to provider certificate directory.\nconst certDirectoryPath = envOrDefault('CERT_DIRECTORY_PATH', path.resolve(cryptoPath, 'users', 'User1@org1.example.com', 'msp', 'signcerts'));\n\n// Path to peer tls certificate.\nconst tlsCertPath = envOrDefault('TLS_CERT_PATH', path.resolve(cryptoPath, 'peers', 'peer0.org1.example.com', 'tls', 'ca.crt'));\n\n// Gateway peer endpoint.\nconst peerEndpoint = envOrDefault('PEER_ENDPOINT', 'localhost:7051');\n\n// Gateway peer SSL host name override.\nconst peerHostAlias = envOrDefault('PEER_HOST_ALIAS', 'peer0.org1.example.com');\n\nconst utf8Decoder = new TextDecoder();\n\nasync function newIdentity(): Promise<Identity> {\n  const certPath = await getFirstDirFileName(certDirectoryPath);\n  const credentials = await fs.readFile(certPath);\n  return { mspId, credentials };\n}\n\nasync function getFirstDirFileName(dirPath: string): Promise<string> {\n  const files = await fs.readdir(dirPath);\n  return path.join(dirPath, files[0]);\n}\n\nasync function newSigner(): Promise<Signer> {\n  const keyPath = await getFirstDirFileName(keyDirectoryPath);\n  const privateKeyPem = await fs.readFile(keyPath);\n  const privateKey = crypto.createPrivateKey(privateKeyPem);\n  return signers.newPrivateKeySigner(privateKey);\n}\n\nexport class FabricGateway {\n  private client?: grpc.Client;\n  private gateway?: Gateway;\n  private contract?: Contract;\n\n  async newGrpcConnection(): Promise<grpc.Client> {\n    const tlsRootCert = await fs.readFile(tlsCertPath);\n    const tlsCredentials = grpc.credentials.createSsl(tlsRootCert);\n    return new grpc.Client(peerEndpoint, tlsCredentials, {\n      'grpc.ssl_target_name_override': peerHostAlias,\n    });\n  }\n\n  async startGateway(): Promise<void> {\n    this.client = await this.newGrpcConnection();\n\n    this.gateway = connect({\n      client: this.client,\n      identity: await newIdentity(),\n      signer: await newSigner(),\n      // Default timeouts for different gRPC calls\n      evaluateOptions: () => {\n        return { deadline: Date.now() + 5000 }; // 5 seconds\n      },\n      endorseOptions: () => {\n        return { deadline: Date.now() + 15000 }; // 15 seconds\n      },\n      submitOptions: () => {\n        return { deadline: Date.now() + 5000 }; // 5 seconds\n      },\n      commitStatusOptions: () => {\n        return { deadline: Date.now() + 60000 }; // 1 minute\n      },\n    });\n  }\n\n  async getContract(chaincodeName: string, channelName: string): Promise<void> {\n    if (this.gateway) {\n      const network = this.gateway.getNetwork(channelName);\n      this.contract = network.getContract(chaincodeName);\n    }\n  }\n\n  async recordUpdateOnLedger(resourceId: string): Promise<string> {\n    if (!this.contract) {\n      return \"\";\n    }\n\n    try {\n      const hash = 'samealways'; //await sha256(JSON.stringify(resource));\n\n      console.log('\\n--> Submit Transaction: CreateEHR');\n\n      const resultBytes = await this.contract.submitTransaction(\n        'CreateEHR',\n        resourceId,\n        hash\n      );\n      const resultJson = utf8Decoder.decode(resultBytes);\n      const result = JSON.parse(resultJson);\n\n      console.log('*** Result:', result);\n      console.log('*** Transaction committed successfully');\n\n      return JSON.stringify(result);\n    } catch (err) {\n      console.log(err);\n      return Promise.reject(err);\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.client && this.gateway) {\n      this.client.close();\n      this.gateway.close();\n    }\n  }\n}\n\n/*\nasync function sha256(data: string): Promise<string> {\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(data);\n  return sha256.digest('hex');\n}\n*/\n\n/**\n * envOrDefault() will return the value of an environment variable, or a default value if the variable is undefined.\n * @param key - env variable key\n * @param defaultValue - default value for env variable\n *\n * @returns value - value\n */\nfunction envOrDefault(key: string, defaultValue: string): string {\n  return process.env[key] || defaultValue;\n}\n\n/**\n * displayInputParameters() will print the global scope parameters used by the main driver routine.\n */\nexport async function displayFabricParameters(): Promise<void> {\n  console.log(`channelName:       ${channelName}`);\n  console.log(`chaincodeName:     ${chaincodeName}`);\n  console.log(`mspId:             ${mspId}`);\n  console.log(`cryptoPath:        ${cryptoPath}`);\n  console.log(`keyDirectoryPath:  ${keyDirectoryPath}`);\n  console.log(`certDirectoryPath: ${certDirectoryPath}`);\n  console.log(`tlsCertPath:       ${tlsCertPath}`);\n  console.log(`peerEndpoint:      ${peerEndpoint}`);\n  console.log(`peerHostAlias:     ${peerHostAlias}`);\n}"],
  "mappings": "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",
  "names": ["src_exports", "__export", "FabricGateway", "displayFabricParameters", "__toCommonJS", "grpc", "import_fabric_gateway", "crypto", "import_fs", "path", "channelName", "envOrDefault", "chaincodeName", "mspId", "cryptoPath", "keyDirectoryPath", "certDirectoryPath", "tlsCertPath", "peerEndpoint", "peerHostAlias", "utf8Decoder", "newIdentity", "certPath", "getFirstDirFileName", "credentials", "fs", "dirPath", "files", "newSigner", "keyPath", "privateKeyPem", "privateKey", "FabricGateway", "tlsRootCert", "tlsCredentials", "network", "resourceId", "hash", "resultBytes", "resultJson", "result", "err", "key", "defaultValue", "displayFabricParameters"]
}
