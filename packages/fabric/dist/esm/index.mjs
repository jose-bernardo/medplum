import*as r from"@grpc/grpc-js";import{connect as d,signers as p}from"@hyperledger/fabric-gateway";import*as l from"crypto";import{promises as i}from"fs";var s=new TextDecoder,c=class{constructor(t){this.options=t,this.displayFabricParameters()}displayFabricParameters(){console.log(`channelName:       ${this.options.channelName}`),console.log(`chaincodeName:     ${this.options.chaincodeName}`),console.log(`mspId:             ${this.options.mspId}`),console.log(`keyPath:           ${this.options.keyPath}`),console.log(`certPath:          ${this.options.certPath}`),console.log(`tlsCertPath:       ${this.options.tlsCertPath}`),console.log(`peerEndpoint:      ${this.options.peerEndpoint}`),console.log(`peerHostAlias:     ${this.options.peerHostAlias}`)}async newSigner(){let t=this.options.keyPath,e=await i.readFile(t),o=l.createPrivateKey(e);return p.newPrivateKeySigner(o)}async newIdentity(){let t=this.options.certPath,e=await i.readFile(t);return{mspId:this.options.mspId,credentials:e}}async newGrpcConnection(){let t=await i.readFile(this.options.tlsCertPath),e=r.credentials.createSsl(t);return new r.Client(this.options.peerEndpoint,e,{"grpc.ssl_target_name_override":this.options.peerHostAlias})}async connect(){this.client=await this.newGrpcConnection(),this.gateway=d({client:this.client,identity:await this.newIdentity(),signer:await this.newSigner(),evaluateOptions:()=>({deadline:Date.now()+5e3}),endorseOptions:()=>({deadline:Date.now()+15e3}),submitOptions:()=>({deadline:Date.now()+5e3}),commitStatusOptions:()=>({deadline:Date.now()+6e4})});let t=this.gateway.getNetwork(this.options.channelName);this.contract=t.getContract(this.options.chaincodeName)}async readEhrNoLog(t){if(!this.contract)throw new Error("contract not defined");try{console.log(`
--> Evaluate Transaction: ReadEHRNoLog`);let e=await this.contract.evaluateTransaction("ReadEHRNoLog",t),o=s.decode(e),n=JSON.parse(o);return console.log("*** Result:",n),n}catch(e){return console.log(e),Promise.reject(e)}}async recordUpdateOnLedger(t,e){if(!this.contract)throw new Error("contract not defined");try{console.log(`
--> Submit Transaction: CreateEHR`);let o=await this.contract.submitTransaction("CreateEHR",e,t),n=s.decode(o),a=JSON.parse(n);return console.log("*** Result:",a),console.log("*** Transaction committed successfully"),a}catch(o){return console.log(o),Promise.reject(o)}}async recordDeleteOnLedger(t){if(!this.contract)throw new Error("contract not defined");console.log(`
--> Submit Transaction: DeleteEHR`);let e=await this.contract.submitTransaction("DeleteEHR",t),o=s.decode(e),n=JSON.parse(o);return console.log("*** Result:",n),console.log("*** Transaction committed successfully"),n}async recordReadOnLedger(t){if(!this.contract)throw new Error("contract not defined");console.log(`
--> Submit Transaction: ReadEHR`);let e=await this.contract.submitTransaction("ReadEHR",t),o=s.decode(e),n=JSON.parse(o);return console.log("*** Result:",n),console.log("*** Transaction committed successfully"),n}async readActionLogEntry(t){if(!this.contract)throw new Error("contract not defined");try{console.log(`
--> Evaluate Transaction: ReadActionLogEntry`);let e=await this.contract.evaluateTransaction("ReadActionLogEntry",t),o=s.decode(e),n=JSON.parse(o);return console.log("*** Result:",n),n}catch(e){return console.log(e),Promise.reject(e)}}async readActionLogEntryByEhrId(t){console.log(t)}async close(){this.client&&this.gateway&&(this.client.close(),this.gateway.close())}};export{c as FabricGateway};
//# sourceMappingURL=index.mjs.map
