import*as s from"@grpc/grpc-js";import{connect as f,signers as v}from"@hyperledger/fabric-gateway";import*as g from"crypto";import{promises as a}from"fs";import*as n from"path";var E=o("CHANNEL_NAME","mychannel"),_=o("CHAINCODE_NAME","ehrcc"),m=o("MSP_ID","Org1MSP"),i=o("CRYPTO_PATH",n.resolve(__dirname,"..","..","..","organizations","peerOrganizations","org1.example.com")),y=o("KEY_DIRECTORY_PATH",n.resolve(i,"users","User1@org1.example.com","msp","keystore")),d=o("CERT_DIRECTORY_PATH",n.resolve(i,"users","User1@org1.example.com","msp","signcerts")),h=o("TLS_CERT_PATH",n.resolve(i,"peers","peer0.org1.example.com","tls","ca.crt")),P=o("PEER_ENDPOINT","localhost:7051"),u=o("PEER_HOST_ALIAS","peer0.org1.example.com"),D=new TextDecoder;async function O(){let r=await w(d),e=await a.readFile(r);return{mspId:m,credentials:e}}async function w(r){let e=await a.readdir(r);return n.join(r,e[0])}async function T(){let r=await w(y),e=await a.readFile(r),t=g.createPrivateKey(e);return v.newPrivateKeySigner(t)}var p=class{async newGrpcConnection(){let e=await a.readFile(h),t=s.credentials.createSsl(e);return new s.Client(P,t,{"grpc.ssl_target_name_override":u})}async startGateway(){this.client=await this.newGrpcConnection(),this.gateway=f({client:this.client,identity:await O(),signer:await T(),evaluateOptions:()=>({deadline:Date.now()+5e3}),endorseOptions:()=>({deadline:Date.now()+15e3}),submitOptions:()=>({deadline:Date.now()+5e3}),commitStatusOptions:()=>({deadline:Date.now()+6e4})})}async getContract(e,t){if(this.gateway){let c=this.gateway.getNetwork(t);this.contract=c.getContract(e)}}async recordUpdateOnLedger(e){if(!this.contract)return"";try{let t="samealways";console.log(`
--> Submit Transaction: CreateEHR`);let c=await this.contract.submitTransaction("CreateEHR",e,t),C=D.decode(c),l=JSON.parse(C);return console.log("*** Result:",l),console.log("*** Transaction committed successfully"),JSON.stringify(l)}catch(t){return console.log(t),Promise.reject(t)}}async close(){this.client&&this.gateway&&(this.client.close(),this.gateway.close())}};function o(r,e){return process.env[r]||e}async function x(){console.log(`channelName:       ${E}`),console.log(`chaincodeName:     ${_}`),console.log(`mspId:             ${m}`),console.log(`cryptoPath:        ${i}`),console.log(`keyDirectoryPath:  ${y}`),console.log(`certDirectoryPath: ${d}`),console.log(`tlsCertPath:       ${h}`),console.log(`peerEndpoint:      ${P}`),console.log(`peerHostAlias:     ${u}`)}export{p as FabricGateway,x as displayFabricParameters};
//# sourceMappingURL=index.mjs.map
