"use strict";var y=Object.create;var r=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var f=(n,t)=>{for(var e in t)r(n,e,{get:t[e],enumerable:!0})},d=(n,t,e,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of P(t))!v.call(n,s)&&s!==e&&r(n,s,{get:()=>t[s],enumerable:!(i=w(t,s))||i.enumerable});return n};var h=(n,t,e)=>(e=n!=null?y(u(n)):{},d(t||!n||!n.__esModule?r(e,"default",{value:n,enumerable:!0}):e,n)),C=n=>d(r({},"__esModule",{value:!0}),n);var N={};f(N,{FabricGateway:()=>p});module.exports=C(N);var a=h(require("@grpc/grpc-js"),1),c=require("@hyperledger/fabric-gateway"),g=h(require("crypto"),1),o=require("fs"),l=new TextDecoder,p=class{constructor(t){this.options=t}displayFabricParameters(){return`channelName:       ${this.options.channelName}
chaincodeName:     ${this.options.chaincodeName}
mspId:             ${this.options.mspId}
keyPath:           ${this.options.keyPath}
certPath:          ${this.options.certPath}
tlsCertPath:       ${this.options.tlsCertPath}
peerEndpoint:      ${this.options.peerEndpoint}
peerHostAlias:     ${this.options.peerHostAlias}`}async newSigner(){let t=this.options.keyPath,e=await o.promises.readFile(t),i=g.createPrivateKey(e);return c.signers.newPrivateKeySigner(i)}async newIdentity(){let t=this.options.certPath,e=await o.promises.readFile(t);return{mspId:this.options.mspId,credentials:e}}async newGrpcConnection(){let t=await o.promises.readFile(this.options.tlsCertPath),e=a.credentials.createSsl(t);return new a.Client(this.options.peerEndpoint,e,{"grpc.ssl_target_name_override":this.options.peerHostAlias})}async connect(){this.client=await this.newGrpcConnection(),this.signer=await this.newSigner(),this.gateway=(0,c.connect)({client:this.client,identity:await this.newIdentity(),signer:this.signer,evaluateOptions:()=>({deadline:Date.now()+1e4}),endorseOptions:()=>({deadline:Date.now()+15e3}),submitOptions:()=>({deadline:Date.now()+1e4}),commitStatusOptions:()=>({deadline:Date.now()+6e4})});let t=this.gateway.getNetwork(this.options.channelName);this.contract=t.getContract(this.options.chaincodeName)}async readAccesses(t){if(!this.contract)throw new Error("contract not defined");console.log(`
--> Evaluate Transaction: ReadAccesses`);let e=await this.contract.evaluateTransaction("ReadAccesses",JSON.stringify(t)),i=l.decode(e);return JSON.parse(i)}async readRecords(t){if(!this.contract)throw new Error("contract not defined");console.log(`
--> Evaluate Transaction: ReadRecords`);let e=await this.contract.evaluateTransaction("ReadRecords",JSON.stringify(t)),i=l.decode(e);return JSON.parse(i)}async logBadAction(t,e,i,s,m){if(!this.contract)throw new Error("contract not defined");console.log(`
--> Submit Transaction: LogBadAction`),await this.contract.submitTransaction("LogBadAction",t,e,i,s,m)}async close(){this.client&&this.gateway&&(this.client.close(),this.gateway.close())}};0&&(module.exports={FabricGateway});
//# sourceMappingURL=index.cjs.map
